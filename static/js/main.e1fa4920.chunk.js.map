{"version":3,"sources":["api/users.ts","components/TodoInfo/TodoInfo.tsx","components/UserInfo/UserInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","TodoInfo","todo","className","title","UserInfo","user","href","TodoList","todos","map","completed","classNames","findUser","userId","usersFromServer","find","todosWithUsers","getTodoId","Math","max","App","useState","setTodos","setTitle","titleError","setTitleError","userError","setUserError","userID","setUserID","action","method","onSubmit","event","preventDefault","selectedUser","titleTrim","trim","newTodo","currentTodo","type","value","onChange","target","placeholder","required","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1fa4920.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { FC } from 'react';\nimport { FullTodoInfo } from '../../types/Type';\n\ninterface Prop {\n  todo: FullTodoInfo;\n}\n\nexport const TodoInfo: FC<Prop> = ({ todo }) => {\n  return (\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n  );\n};\n","import { FC } from 'react';\nimport { User } from '../../types/Type';\n\ninterface Prop {\n  user: User;\n}\n\nexport const UserInfo: FC<Prop> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { FullTodoInfo } from '../../types/Type';\nimport { TodoInfo } from '../TodoInfo';\nimport { UserInfo } from '../UserInfo';\n\ninterface Prop {\n  todos: FullTodoInfo[];\n}\n\nexport const TodoList: FC<Prop> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => {\n        const { id, user, completed } = todo;\n\n        return (\n          <article\n            data-id={id}\n            className={classNames('TodoInfo',\n              { 'TodoInfo--completed': completed })}\n            key={id}\n          >\n            <TodoInfo todo={todo} />\n            {user && <UserInfo user={user} />}\n          </article>\n        );\n      })}\n    </section>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { FullTodoInfo, User } from './types/Type';\n\nconst findUser = (userId: number): User | null => {\n  return usersFromServer.find(user => user.id === userId) || null;\n};\n\nconst todosWithUsers: FullTodoInfo[] = todosFromServer.map((todo) => ({\n  ...todo,\n  user: findUser(todo.userId),\n}));\n\nconst getTodoId = (todos: FullTodoInfo[]) => {\n  const id = Math.max(...todos.map(todo => todo.id));\n\n  return id + 1;\n};\n\nexport const App = () => {\n  const [todos, setTodos] = useState<FullTodoInfo[]>(todosWithUsers);\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n  const [userError, setUserError] = useState(false);\n  const [userID, setUserID] = useState(0);\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setTitleError(false);\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserID(+event.target.value);\n    setUserError(false);\n  };\n\n  const hadleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const selectedUser = findUser(userID);\n\n    const titleTrim = title.trim();\n\n    setTitleError(!titleTrim);\n    setUserError(!userID);\n\n    if (!titleTrim || !userID) {\n      return;\n    }\n\n    const newTodo: FullTodoInfo = {\n      id: getTodoId(todos),\n      title,\n      completed: false,\n      userId: userID,\n      user: selectedUser,\n    };\n\n    setTodos(currentTodo => [...currentTodo, newTodo]);\n    setTitle('');\n    setUserID(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={hadleFormSubmit}\n      >\n        <div className=\"field\">\n          {'Title: '}\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={handleInput}\n            placeholder=\"Enter a title\"\n          />\n          {titleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          {'User: '}\n          <select\n            data-cy=\"userSelect\"\n            value={userID}\n            onChange={handleSelect}\n            required\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {userError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}